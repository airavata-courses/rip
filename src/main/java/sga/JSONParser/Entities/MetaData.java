package sga.JSONParser.Entities;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-13")
public class MetaData implements org.apache.thrift.TBase<MetaData, MetaData._Fields>, java.io.Serializable, Cloneable, Comparable<MetaData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetaData");

  private static final org.apache.thrift.protocol.TField ELEMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ElementName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("Phase", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPECTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("Spectra", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WAVE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("WaveLength", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COORDINATES_FIELD_DESC = new org.apache.thrift.protocol.TField("Coordinates", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MetaDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MetaDataTupleSchemeFactory();

  public java.lang.String ElementName; // required
  public java.lang.String Phase; // required
  public java.lang.String Spectra; // required
  public java.lang.String WaveLength; // required
  public java.util.List<Coordinate> Coordinates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ELEMENT_NAME((short)1, "ElementName"),
    PHASE((short)2, "Phase"),
    SPECTRA((short)3, "Spectra"),
    WAVE_LENGTH((short)4, "WaveLength"),
    COORDINATES((short)5, "Coordinates");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ELEMENT_NAME
          return ELEMENT_NAME;
        case 2: // PHASE
          return PHASE;
        case 3: // SPECTRA
          return SPECTRA;
        case 4: // WAVE_LENGTH
          return WAVE_LENGTH;
        case 5: // COORDINATES
          return COORDINATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ELEMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("ElementName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHASE, new org.apache.thrift.meta_data.FieldMetaData("Phase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECTRA, new org.apache.thrift.meta_data.FieldMetaData("Spectra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAVE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("WaveLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATES, new org.apache.thrift.meta_data.FieldMetaData("Coordinates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coordinate.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetaData.class, metaDataMap);
  }

  public MetaData() {
  }

  public MetaData(
    java.lang.String ElementName,
    java.lang.String Phase,
    java.lang.String Spectra,
    java.lang.String WaveLength,
    java.util.List<Coordinate> Coordinates)
  {
    this();
    this.ElementName = ElementName;
    this.Phase = Phase;
    this.Spectra = Spectra;
    this.WaveLength = WaveLength;
    this.Coordinates = Coordinates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetaData(MetaData other) {
    if (other.isSetElementName()) {
      this.ElementName = other.ElementName;
    }
    if (other.isSetPhase()) {
      this.Phase = other.Phase;
    }
    if (other.isSetSpectra()) {
      this.Spectra = other.Spectra;
    }
    if (other.isSetWaveLength()) {
      this.WaveLength = other.WaveLength;
    }
    if (other.isSetCoordinates()) {
      java.util.List<Coordinate> __this__Coordinates = new java.util.ArrayList<Coordinate>(other.Coordinates.size());
      for (Coordinate other_element : other.Coordinates) {
        __this__Coordinates.add(new Coordinate(other_element));
      }
      this.Coordinates = __this__Coordinates;
    }
  }

  public MetaData deepCopy() {
    return new MetaData(this);
  }

  @Override
  public void clear() {
    this.ElementName = null;
    this.Phase = null;
    this.Spectra = null;
    this.WaveLength = null;
    this.Coordinates = null;
  }

  public java.lang.String getElementName() {
    return this.ElementName;
  }

  public MetaData setElementName(java.lang.String ElementName) {
    this.ElementName = ElementName;
    return this;
  }

  public void unsetElementName() {
    this.ElementName = null;
  }

  /** Returns true if field ElementName is set (has been assigned a value) and false otherwise */
  public boolean isSetElementName() {
    return this.ElementName != null;
  }

  public void setElementNameIsSet(boolean value) {
    if (!value) {
      this.ElementName = null;
    }
  }

  public java.lang.String getPhase() {
    return this.Phase;
  }

  public MetaData setPhase(java.lang.String Phase) {
    this.Phase = Phase;
    return this;
  }

  public void unsetPhase() {
    this.Phase = null;
  }

  /** Returns true if field Phase is set (has been assigned a value) and false otherwise */
  public boolean isSetPhase() {
    return this.Phase != null;
  }

  public void setPhaseIsSet(boolean value) {
    if (!value) {
      this.Phase = null;
    }
  }

  public java.lang.String getSpectra() {
    return this.Spectra;
  }

  public MetaData setSpectra(java.lang.String Spectra) {
    this.Spectra = Spectra;
    return this;
  }

  public void unsetSpectra() {
    this.Spectra = null;
  }

  /** Returns true if field Spectra is set (has been assigned a value) and false otherwise */
  public boolean isSetSpectra() {
    return this.Spectra != null;
  }

  public void setSpectraIsSet(boolean value) {
    if (!value) {
      this.Spectra = null;
    }
  }

  public java.lang.String getWaveLength() {
    return this.WaveLength;
  }

  public MetaData setWaveLength(java.lang.String WaveLength) {
    this.WaveLength = WaveLength;
    return this;
  }

  public void unsetWaveLength() {
    this.WaveLength = null;
  }

  /** Returns true if field WaveLength is set (has been assigned a value) and false otherwise */
  public boolean isSetWaveLength() {
    return this.WaveLength != null;
  }

  public void setWaveLengthIsSet(boolean value) {
    if (!value) {
      this.WaveLength = null;
    }
  }

  public int getCoordinatesSize() {
    return (this.Coordinates == null) ? 0 : this.Coordinates.size();
  }

  public java.util.Iterator<Coordinate> getCoordinatesIterator() {
    return (this.Coordinates == null) ? null : this.Coordinates.iterator();
  }

  public void addToCoordinates(Coordinate elem) {
    if (this.Coordinates == null) {
      this.Coordinates = new java.util.ArrayList<Coordinate>();
    }
    this.Coordinates.add(elem);
  }

  public java.util.List<Coordinate> getCoordinates() {
    return this.Coordinates;
  }

  public MetaData setCoordinates(java.util.List<Coordinate> Coordinates) {
    this.Coordinates = Coordinates;
    return this;
  }

  public void unsetCoordinates() {
    this.Coordinates = null;
  }

  /** Returns true if field Coordinates is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinates() {
    return this.Coordinates != null;
  }

  public void setCoordinatesIsSet(boolean value) {
    if (!value) {
      this.Coordinates = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ELEMENT_NAME:
      if (value == null) {
        unsetElementName();
      } else {
        setElementName((java.lang.String)value);
      }
      break;

    case PHASE:
      if (value == null) {
        unsetPhase();
      } else {
        setPhase((java.lang.String)value);
      }
      break;

    case SPECTRA:
      if (value == null) {
        unsetSpectra();
      } else {
        setSpectra((java.lang.String)value);
      }
      break;

    case WAVE_LENGTH:
      if (value == null) {
        unsetWaveLength();
      } else {
        setWaveLength((java.lang.String)value);
      }
      break;

    case COORDINATES:
      if (value == null) {
        unsetCoordinates();
      } else {
        setCoordinates((java.util.List<Coordinate>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ELEMENT_NAME:
      return getElementName();

    case PHASE:
      return getPhase();

    case SPECTRA:
      return getSpectra();

    case WAVE_LENGTH:
      return getWaveLength();

    case COORDINATES:
      return getCoordinates();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ELEMENT_NAME:
      return isSetElementName();
    case PHASE:
      return isSetPhase();
    case SPECTRA:
      return isSetSpectra();
    case WAVE_LENGTH:
      return isSetWaveLength();
    case COORDINATES:
      return isSetCoordinates();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MetaData)
      return this.equals((MetaData)that);
    return false;
  }

  public boolean equals(MetaData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ElementName = true && this.isSetElementName();
    boolean that_present_ElementName = true && that.isSetElementName();
    if (this_present_ElementName || that_present_ElementName) {
      if (!(this_present_ElementName && that_present_ElementName))
        return false;
      if (!this.ElementName.equals(that.ElementName))
        return false;
    }

    boolean this_present_Phase = true && this.isSetPhase();
    boolean that_present_Phase = true && that.isSetPhase();
    if (this_present_Phase || that_present_Phase) {
      if (!(this_present_Phase && that_present_Phase))
        return false;
      if (!this.Phase.equals(that.Phase))
        return false;
    }

    boolean this_present_Spectra = true && this.isSetSpectra();
    boolean that_present_Spectra = true && that.isSetSpectra();
    if (this_present_Spectra || that_present_Spectra) {
      if (!(this_present_Spectra && that_present_Spectra))
        return false;
      if (!this.Spectra.equals(that.Spectra))
        return false;
    }

    boolean this_present_WaveLength = true && this.isSetWaveLength();
    boolean that_present_WaveLength = true && that.isSetWaveLength();
    if (this_present_WaveLength || that_present_WaveLength) {
      if (!(this_present_WaveLength && that_present_WaveLength))
        return false;
      if (!this.WaveLength.equals(that.WaveLength))
        return false;
    }

    boolean this_present_Coordinates = true && this.isSetCoordinates();
    boolean that_present_Coordinates = true && that.isSetCoordinates();
    if (this_present_Coordinates || that_present_Coordinates) {
      if (!(this_present_Coordinates && that_present_Coordinates))
        return false;
      if (!this.Coordinates.equals(that.Coordinates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetElementName()) ? 131071 : 524287);
    if (isSetElementName())
      hashCode = hashCode * 8191 + ElementName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhase()) ? 131071 : 524287);
    if (isSetPhase())
      hashCode = hashCode * 8191 + Phase.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpectra()) ? 131071 : 524287);
    if (isSetSpectra())
      hashCode = hashCode * 8191 + Spectra.hashCode();

    hashCode = hashCode * 8191 + ((isSetWaveLength()) ? 131071 : 524287);
    if (isSetWaveLength())
      hashCode = hashCode * 8191 + WaveLength.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoordinates()) ? 131071 : 524287);
    if (isSetCoordinates())
      hashCode = hashCode * 8191 + Coordinates.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MetaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetElementName()).compareTo(other.isSetElementName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElementName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ElementName, other.ElementName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhase()).compareTo(other.isSetPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Phase, other.Phase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpectra()).compareTo(other.isSetSpectra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpectra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Spectra, other.Spectra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWaveLength()).compareTo(other.isSetWaveLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaveLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WaveLength, other.WaveLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCoordinates()).compareTo(other.isSetCoordinates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Coordinates, other.Coordinates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MetaData(");
    boolean first = true;

    sb.append("ElementName:");
    if (this.ElementName == null) {
      sb.append("null");
    } else {
      sb.append(this.ElementName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Phase:");
    if (this.Phase == null) {
      sb.append("null");
    } else {
      sb.append(this.Phase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Spectra:");
    if (this.Spectra == null) {
      sb.append("null");
    } else {
      sb.append(this.Spectra);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("WaveLength:");
    if (this.WaveLength == null) {
      sb.append("null");
    } else {
      sb.append(this.WaveLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Coordinates:");
    if (this.Coordinates == null) {
      sb.append("null");
    } else {
      sb.append(this.Coordinates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetaDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MetaDataStandardScheme getScheme() {
      return new MetaDataStandardScheme();
    }
  }

  private static class MetaDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<MetaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ELEMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ElementName = iprot.readString();
              struct.setElementNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Phase = iprot.readString();
              struct.setPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPECTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Spectra = iprot.readString();
              struct.setSpectraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WAVE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.WaveLength = iprot.readString();
              struct.setWaveLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COORDINATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.Coordinates = new java.util.ArrayList<Coordinate>(_list0.size);
                Coordinate _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Coordinate();
                  _elem1.read(iprot);
                  struct.Coordinates.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCoordinatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ElementName != null) {
        oprot.writeFieldBegin(ELEMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.ElementName);
        oprot.writeFieldEnd();
      }
      if (struct.Phase != null) {
        oprot.writeFieldBegin(PHASE_FIELD_DESC);
        oprot.writeString(struct.Phase);
        oprot.writeFieldEnd();
      }
      if (struct.Spectra != null) {
        oprot.writeFieldBegin(SPECTRA_FIELD_DESC);
        oprot.writeString(struct.Spectra);
        oprot.writeFieldEnd();
      }
      if (struct.WaveLength != null) {
        oprot.writeFieldBegin(WAVE_LENGTH_FIELD_DESC);
        oprot.writeString(struct.WaveLength);
        oprot.writeFieldEnd();
      }
      if (struct.Coordinates != null) {
        oprot.writeFieldBegin(COORDINATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Coordinates.size()));
          for (Coordinate _iter3 : struct.Coordinates)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetaDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MetaDataTupleScheme getScheme() {
      return new MetaDataTupleScheme();
    }
  }

  private static class MetaDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<MetaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetElementName()) {
        optionals.set(0);
      }
      if (struct.isSetPhase()) {
        optionals.set(1);
      }
      if (struct.isSetSpectra()) {
        optionals.set(2);
      }
      if (struct.isSetWaveLength()) {
        optionals.set(3);
      }
      if (struct.isSetCoordinates()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetElementName()) {
        oprot.writeString(struct.ElementName);
      }
      if (struct.isSetPhase()) {
        oprot.writeString(struct.Phase);
      }
      if (struct.isSetSpectra()) {
        oprot.writeString(struct.Spectra);
      }
      if (struct.isSetWaveLength()) {
        oprot.writeString(struct.WaveLength);
      }
      if (struct.isSetCoordinates()) {
        {
          oprot.writeI32(struct.Coordinates.size());
          for (Coordinate _iter4 : struct.Coordinates)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ElementName = iprot.readString();
        struct.setElementNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Phase = iprot.readString();
        struct.setPhaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Spectra = iprot.readString();
        struct.setSpectraIsSet(true);
      }
      if (incoming.get(3)) {
        struct.WaveLength = iprot.readString();
        struct.setWaveLengthIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Coordinates = new java.util.ArrayList<Coordinate>(_list5.size);
          Coordinate _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new Coordinate();
            _elem6.read(iprot);
            struct.Coordinates.add(_elem6);
          }
        }
        struct.setCoordinatesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

